# Greedy Algorithm (탐욕 알고리즘)
# 현재 상황에서 최적이라고 생각하는 해를 선택하는 방법
# 매 순간 최적이라 생각되는 것을 선택하며, 현재의 선택이 나중에 미칠 영향에 대해서는 고려하지 않는다.
# -> 그러므로 항상 최적해(Global optimum)를 보장하지는 않는다.
# '가장 큰 순서대로', '가장 작은 순서대로' 와 같은 기준이 제시된 경우
# 대표적인 그리디 문제 - 거스름돈


# < 문제 >
# 500원, 100원, 50원, 10원짜리 동전이 무한히 존재하고,
# 손님에게 거슬러 줘야 할 돈이 n원일 때,
# 거슬러 줘야 할 동전의 최소 개수를 구하라

n = int(input())
count = 0

# 큰 동전부터 차례로 확인
coin = [500, 100, 50, 10]
for i in coin:
    count += n//i # n에 포함될 수 있는 i동전의 개수를 총 개수에 더하기
    n %= i # n에서 가능한 i동전의 개수를 제외한 나머지

print(count)

# 이 문제가 그리디 알고리즘으로 풀린 이유는
# 존재하는 동전의 종류에서 큰 단위가 작은 단위의 배수 형태이기 때문이다.
# 이는 작은 단위의 동전을 종합해 다른 해가 나올 수 없으므로 언제나 최적해를 보장한다.
# 하지만 동전의 단위가 서로 배수의 형태가 아니라, 무작위로 주어지는 경우에는 그리디가 아닌 다이나믹 프로그래밍으로 해결해야 한다.